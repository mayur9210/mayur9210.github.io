{"version":3,"sources":["webpack:///./codecs/oxipng/worker.ts","webpack:///./codecs/oxipng/pkg-parallel/squoosh_oxipng.js","webpack:///./codecs/oxipng/pkg-parallel/squoosh_oxipng_bg.wasm","webpack:///./codecs/oxipng/spawn.ts"],"names":["module","exports","__webpack_require__","p","wasm","memory","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","__wbindgen_export_0","Uint8Array","takeObject","ret","getObject","dropObject","worker_initializer","num","start_main_thread","WASM_VECTOR_LEN","cachegetInt32Memory0","getInt32Memory0","Int32Array","optimise","data","level","retptr","__wbindgen_export_1","value","ptr0","arg","malloc","ptr","set","passArray8ToWasm0","__wbindgen_malloc","len0","r0","r1","v1","len","subarray","getArrayU8FromWasm0","slice","__wbindgen_free","__webpack_exports__","async","init","input","maybe_memory","imports","wbg","__wbindgen_module","__wbindgen_wasm_module","__wbindgen_memory","__wbg_of_6510501edc06d65e","arg0","arg1","of","__wbindgen_throw","Error","getStringFromWasm0","Request","URL","fetch","instance","Response","WebAssembly","Memory","initial","maximum","shared","instantiateStreaming","e","headers","get","console","warn","bytes","arrayBuffer","instantiate","Instance","load","__wbindgen_start","r","__webpack__worker__1","_pkg_parallel__WEBPACK_IMPORTED_MODULE_0__","_pkg_parallel_squoosh_oxipng_bg_wasm__WEBPACK_IMPORTED_MODULE_1__","_pkg_parallel_squoosh_oxipng_bg_wasm__WEBPACK_IMPORTED_MODULE_1___default","n","navigator","hardwareConcurrency","workers","from","Worker","Object","a","workerInit","Promise","all","map","worker","resolve","postMessage","addEventListener","once","initWorker"],"mappings":"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","file":"11.01a41.worker.js","sourcesContent":["module.exports = __webpack_public_path__ + \"0.598d7.worker.worker.js\"","\nlet wasm;\nlet memory;\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.__wbindgen_export_0.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.__wbindgen_export_0.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @param {number} num\n* @returns {any}\n*/\nexport function worker_initializer(num) {\n    var ret = wasm.worker_initializer(num);\n    return takeObject(ret);\n}\n\n/**\n*/\nexport function start_main_thread() {\n    wasm.start_main_thread();\n}\n\n/**\n*/\nexport function start_worker_thread() {\n    wasm.start_worker_thread();\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.__wbindgen_export_0.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.__wbindgen_export_0.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint8Array} data\n* @param {number} level\n* @returns {Uint8Array}\n*/\nexport function optimise(data, level) {\n    try {\n        const retptr = wasm.__wbindgen_export_1.value - 16;\n        wasm.__wbindgen_export_1.value = retptr;\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.optimise(retptr, ptr0, len0, level);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    } finally {\n        wasm.__wbindgen_export_1.value += 16;\n    }\n}\n\nasync function load(module, imports, maybe_memory) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        memory = imports.wbg.memory = new WebAssembly.Memory({initial:17,maximum:16384,shared:true});\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        memory = imports.wbg.memory = maybe_memory;\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input, maybe_memory) {\n    if (typeof input === 'undefined') {\n        \n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_module = function() {\n        var ret = init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        var ret = wasm.__wbindgen_export_0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_of_6510501edc06d65e = function(arg0, arg1) {\n        var ret = Array.of(takeObject(arg0), takeObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    const { instance, module } = await load(await input, imports, maybe_memory);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nexport default init;\n\n","module.exports = __webpack_public_path__ + \"squoosh_oxipng_bg.d7861.wasm\";","import initOxiPNG, {\n  worker_initializer,\n  start_main_thread,\n  optimise,\n} from './pkg-parallel';\n// @ts-ignore\nimport wasmUrl from './pkg-parallel/squoosh_oxipng_bg.wasm';\nimport { WorkerInit } from './worker';\n\nfunction initWorker(worker: Worker, workerInit: WorkerInit) {\n  return new Promise((resolve) => {\n    worker.postMessage(workerInit);\n    worker.addEventListener('message', () => resolve(), { once: true });\n  });\n}\n\nasync function startMainThread() {\n  const num = navigator.hardwareConcurrency;\n\n  // First, let browser fetch and spawn Workers for our pool in the background.\n  // This is fairly expensive, so we want to start it as early as possible.\n  const workers = Array.from({ length: num }, () => new Worker('./worker', { type: 'module' }));\n\n  // Meanwhile, asynchronously compile, instantiate and initialise Wasm on our main thread.\n  await initOxiPNG(fetch(wasmUrl), undefined as any);\n\n  // Get module+memory from the Wasm instance.\n  //\n  // Ideally we wouldn't go via Wasm bindings here, since both are just JS variables, but memory is\n  // currently not exposed on the Wasm instance correctly by wasm-bindgen.\n  const workerInit: WorkerInit = worker_initializer(num);\n\n  // Once done, we want to send module+memory to each Worker so that they instantiate Wasm too.\n  // While doing so, we need to wait for Workers to acknowledge that they have received our message.\n  // Ideally this shouldn't be necessary, but Chromium currently doesn't conform to the spec:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=1075645\n  //\n  // If we didn't do this ping-pong game, the `start_main_thread` below would block the current\n  // thread on an atomic before even *sending* the `postMessage` containing memory,\n  // so Workers would never be able to unblock us back.\n  await Promise.all(workers.map(worker => initWorker(worker, workerInit)));\n\n  // Finally, instantiate rayon pool - this will use shared Wasm memory to send tasks to the\n  // Workers and then block until they're all ready.\n  start_main_thread();\n\n  return {\n    optimise,\n  };\n}\n\nexport default startMainThread();\n"],"sourceRoot":""}